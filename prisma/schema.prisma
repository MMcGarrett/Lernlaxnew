generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique(map: "unique_email")
  username      String      @unique(map: "unique_username")
  first_name    String
  last_name     String
  password_hash String
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  avatar_url    String      @default("/Avatare_M/Luca.png")
  mood_entries  MoodEntry[]

  @@map("users")
}

model ContentText {
  id         Int       @id @default(autoincrement())
  key        String
  group      String
  step       String
  gender     String?
  title      String?
  content    String
  language   String    @default("de")
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([key, language, gender])
  @@map("content_texts")
}

model MoodEntry {
  id      Int      @id @default(autoincrement())
  user_id Int
  date    DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  rating  Int
  note    String?
  users   User     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")

  @@map("mood_entries")
}

model QuizSession {
  id         Int          @id @default(autoincrement())
  user_id    Int?         
  user       User?        @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  answers    QuizAnswer[]
  result     QuizResult?

  @@map("quiz_sessions")
}

model QuizQuestion {
  id       Int       @id
  text     String
  options  String[]  // z.B. ["3h", "6h", "8h"]

  @@map("quiz_questions")
}

model QuizAnswer {
  id           Int           @id @default(autoincrement())
  session_id   Int
  question_id  Int
  selected     String

  session      QuizSession   @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  question     QuizQuestion  @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("quiz_answers")
}

model QuizResult {
  id          Int           @id @default(autoincrement())
  session_id  Int           @unique
  resultText  String
  created_at  DateTime      @default(now()) @db.Timestamptz(6)

  session     QuizSession   @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("quiz_results")
}